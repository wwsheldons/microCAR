import pyb,osimport GLpath = '/sd/log/'pos_path = path+'pos_record'#prnfn = pos_path+'/num.txt'prnfn = path+'pos.txt'usfn = path+'using_times.txt'ipfn = path+'ip.txt'portfn = path + 'port.txt'apnfn = path + 'apn.txt'idfn = path + 'id.txt'pwdfn = path + 'passwd.txt'apfn = path+'admin_phone.txt'eocfn = path+'emergency_open_card.txt'eccfn = path+'emergency_close_card.txt'gifn = path+'gas_info.txt'srfn = path+'swipe_record.txt'smsfn = path+'sms_record.txt'pdrfn = path+'power_down_record.txt'lorfn = path+'lock_open_record.txt'corfn = path+'control_open_record.txt'posfn = path+'pos_record.txt'lsfn = path+'lock_status.txt'def load_sys_variable():    GL.host_id = get_id()    GL.ip = get_ip()    GL.port = get_port()    GL.gas_num = []    GL.ic_open = []    GL.ic_close = []    GL.ic_using_times = []    GL.gas_latitude = []    GL.gas_longitude = []    GL.distance = []    GL.oprerate_lock_status = []    load_emergency_variable()def load_emergency_variable():    GL.gas_num = []    GL.ic_open  = []    GL.ic_close = []    GL.ic_using_times = []    GL.gas_latitude = []    GL.gas_longitude = []    GL.distance = []    GL.oprerate_lock_status = []    GL.emergency_close_card = []    GL.emergency_open_card = []    try:        n,GL.set_phone = get_adimin_phone()    except:        pass    try:        GL.emergency_open_card,GL.emergency_open_card_times = get_emergency_open_card()        GL.emergency_close_card = get_emergency_close_card()    except:        pass    try:        n, gas_info = get_gas_info()        GL.n_gas = n        for i in range(n):            GL.gas_num.extend([gas_info[i][:6]])            GL.ic_open.extend([gas_info[i][6:14]])            GL.ic_close.extend([gas_info[i][14:22]])            GL.ic_using_times.extend([int(gas_info[i][22:24])])            GL.gas_latitude.extend([float(gas_info[i][24:33])])            GL.gas_longitude.extend([float(gas_info[i][33:43])])            GL.distance.extend([int(gas_info[i][43:47])])            GL.oprerate_lock_status.extend([[int(j) for j in gas_info[i][47:]]])    except:        passdef del_one_group_emergency_variable(n):    return del_rows(gifn,n)    def prepare_dir():    all_file = os.listdir('/sd')    if 'log' in all_file:        log_file = os.listdir('/sd/log')        for i in log_file:            os.remove('/sd/log/'+i)        os.rmdir('log')        os.mkdir('/sd/log')    os.mkdir('/sd/log/pos_record')    gc.collect()def prepare_file():    modify_using_times(0)    modify_ip('')    modify_port(0)    modify_ls(0)    modify_id('')    modify_pwd('')    modify_adimin_phone('')    modify_emergency_open_card('')    modify_emergency_close_card('')    modify_gas_info('')    modify_swipe_record('')    modify_sms_record('')    modify_power_down_record('')    modify_lock_open_record('')    modify_control_open_record('')    modify_pos_record('')        def write_line_to_file(filename,dat,mode):    try:        with open(filename, mode) as f:            f.write(dat)            f.write(b'\r\n')            f.close()            pyb.sync()            #pyb.delay(50)            return 1    except OSError as error:        print("Error: can not write to SD card. %s" % error)        return None        def modify_info(filename,dat,opt = 'rewrite'):    if opt == 'add':        mode = 'a'    elif opt == 'rewrite':        mode = 'wb'    else:        print('wrong type for writing')        return None        if isinstance(dat,bytearray) or isinstance(dat,str) or isinstance(dat,bytes):        pass    elif isinstance(dat,int):        #dat = ((dat).to_bytes(4, "little"))        dat = str(dat).encode()    elif dat == None:        pass    else:        print('{} wrong data type'.format(filename))        return None    return write_line_to_file(filename,dat,mode)def modify_infos(filename,dats,opt = 'rewrite'):    for i in range(1,len(dats)):        if len(dats[0]) != len(dats[i]):            print('{} data format is wrong'.format(filename))            return None    n = 0    for i in range(len(dats)):        if i == 0:            mode = opt        else:            mode = 'add'        if modify_info(filename,dats[i],mode):            n= n+1    if n == len(dats):        return 1    else:        return Nonedef test_modify_info(opt = 0):    filename = test_filename    if opt == 0:        mode = 'rewrite'    else:        mode = 'add'    dat = test_dat[opt]    modify_info(filename,dat,mode)    def read_line_from_file(filename):    nth = 0    try:        with open(filename, 'rb') as f:            line = f.readline()            while line:                nth = nth +1                yield nth,line                line = f.readline()            f.close()            yield None    except OSError as error:        print("Error: can not write to SD card. %s" % error)        return Nonedef get_rows(filename):    n = 0     for line in read_line_from_file(filename):        if not line:            return n        n = n+1    return None    def get_info(filename,n=1):    for line in read_line_from_file(filename):        if line[0] == n:            if line[1][:-2] == b'':                return b'0'            return line[1][:-2]    return None    def get_infos(filename):    n = get_rows(filename)    infos = []    if n <= 50:        for i in range(n):            infos.append(get_info(filename,i+1).decode())            #infos.append(get_info(filename,i+1))        if infos == ['0']:            pass        return infos    else:        print('RAM is not enough')        def del_rows(filename,row):    if isinstance(row,int):        row = [row]    n = get_rows(filename)    for i in range(len(row)):        if row[i] > n:            print('the {}th row is not exsit'.format(row))            return None    na,su = filename.split('.')    new_filename = na+'_.'+su    try:        with open(new_filename, 'wb') as g:            for i in range(n):                if i+1 in row:                    continue                g.write(get_info(filename,i+1))                g.write(b'\r\n')        os.remove(filename)        os.rename(new_filename, filename)        return 1    except:        return None        def prepare_dir():    all_file = os.listdir('/sd')    if 'log' in all_file:        log_file = os.listdir('/sd/log')        for i in log_file:            os.remove('/sd/log/'+i)        os.rmdir('log')        os.mkdir('/sd/log')    os.mkdir('/sd/log/pos_record')                def get_using_times():    #return int.from_bytes(get_info(usfn),'little') #b'0' ->48    return int(get_info(usfn),10)def modify_using_times(num = 1):    if num == 0:        return modify_info(usfn,0)    return modify_info(usfn,get_using_times()+1)    def get_ip():    return get_info(ipfn).decode()def modify_ip(ip):    return modify_info(ipfn,ip)    def get_port():    return int(get_info(portfn))def modify_port(port):    return modify_info(portfn,port)    def get_ls():    return int(get_info(lsfn),10)def modify_ls(ls):    return modify_info(lsfn,ls)    def get_apn():    return int(get_info(apnfn))def modify_apn(apn):    return modify_info(apnfn,apn)    def get_id():    return get_info(idfn).decode()def modify_id(local_id):    return modify_info(idfn,local_id)    def get_pwd():    return get_info(pwdfn).decode()def modify_pwd(pwd):    return modify_info(pwdfn,pwd)    def get_adimin_phone():    return get_infos(apfn)def modify_adimin_phone(ap):    if isinstance(ap,str) or isinstance(ap,bytes) or isinstance(ap,bytearray):        ap = [ap]    elif isinstance(ap,list):        pass    else:        print('the format of adimin phone is wrong')    return modify_infos(apfn,ap)    def get_emergency_open_card():    tmp_card = get_infos(eocfn)    card = [i[:-2] for i in tmp_card]    times = [int(i[-2:]) for i in tmp_card]    return card,timesdef modify_emergency_open_card(eoc):    if isinstance(eoc,str) or isinstance(eoc,bytes) or isinstance(eoc,bytearray):        eoc = [eoc]    elif isinstance(eoc,list):        pass    else:        print('the format of emergency_open_card is wrong')    return modify_infos(eocfn,eoc)def get_emergency_close_card():    return get_infos(eccfn)def modify_emergency_close_card(ecc):    if isinstance(ecc,str) or isinstance(ecc,bytes) or isinstance(ecc,bytearray):        ecc = [ecc]    elif isinstance(ecc,list):        pass    else:        print('the format of emergency_close_card is wrong')    return modify_infos(eccfn,ecc)def split_plus(d,n):    return [d[i:i+n] for i in range(0,len(d),n)]def get_gas_info():    return get_infos(gifn)def modify_gas_info(gi):    if gi == [] or gi == '':        return modify_info(gifn,'')    if isinstance(gi,list):        return modify_infos(gifn,gi)    order = gi[0]    num_of_gas = int(chr(gi[1]),10)    if order in [48,'0',b'0']:        mode = 'rewrite'    elif order in [49,'1',b'1']:        mode = 'add'    else:        print('write emergency data type is wrong')        return None    gas_data = gi[2:]    if len(gas_data)%59 != 0:        print('length of emergency data is wrong')        return None    return modify_infos(gifn,split_plus(gas_data,59),mode)def get_gas_id():    n = get_rows(gifn)    ids = []    for i in range(n):        ids.append(get_info(gifn,i+1)[:6])    return str(n)+''.join([i.decode() for i in ids])###################################################startdef get_swipe_record():    return get_infos(srfn)def modify_swipe_record(sr):    if not sr:        return clear_swipe_record()    if not isinstance(sr,bytearray):        sr = bytearray(sr)    sr[53+12] = 50    return modify_info(srfn,sr,'add')def clear_swipe_record():    return modify_info(srfn,'')    def get_sms_record():    return get_infos(smsfn)def modify_sms_record(sms):    if not sms:        return clear_sms_record()    if not isinstance(sms,bytearray):        sms = bytearray(sms)    sms[53+12] = 50    return modify_info(smsfn,sms,'add')def clear_sms_record():    return modify_info(smsfn,'')    def get_power_down_record():    return get_info(pdrfn)def modify_power_down_record(pdr):    return modify_info(pdrfn,pdr,'add')def clear_power_down_record():    return modify_info(pdrfn,'','rewrite')def get_lock_open_record():    return get_infos(lorfn)def modify_lock_open_record(lor):    return modify_info(lorfn,lor,'add')def clear_lock_open_record():    return modify_info(lorfn,'')    def get_control_open_record():    return get_infos(corfn)def modify_control_open_record(cor):    return modify_info(corfn,cor,'add')def clear_control_open_record():    return modify_info(corfn,'')###################################################enddef get_pos_record(n):    if n == 0:        return get_rows(prnfn)    else:        return get_info(prnfn,n)def modify_pos_record(pos):    if not pos:        return modify_info(posfn,'')    if not isinstance(pos,bytearray):        pos = bytearray(pos)    pos[53+12] = 50    return modify_info(posfn,pos,'add')def clear_pos_record(n):    return del_rows(posfn,n)storage_basic0 = {'m_ls':modify_ls}storage_basic1 = {'g_gas_info':get_gas_info,'m_emergency_card':modify_emergency_open_card,'m_emergency_c_card':modify_emergency_close_card}storage_gprs={'m_gas_info':modify_gas_info,'g_gas_id':get_gas_id,'g_emergency_card':get_emergency_open_card,'write_line':write_line_to_file,'m_ip':modify_ip,'m_port':modify_port,'m_id':modify_id,'m_ap':modify_adimin_phone,'load_em':load_emergency_variable,'m_pwd':modify_pwd,'m_sms':modify_sms_record,'m_using_times':modify_using_times}storage_gprs.update(storage_basic0)storage_gprs.update(storage_basic1)storage_sys={'m_pos_record':modify_pos_record,'prep_dir':prepare_dir, 'prep_file':prepare_file, 'load':load_sys_variable,'g_ls':get_ls,'del_group':del_one_group_emergency_variable,'m_sw_record':modify_swipe_record,'g_using_times':get_using_times,'m_using_times':modify_using_times}storage_sys.update(storage_basic0)storage_sys.update(storage_basic1)storage_main = {'m_pos_record':modify_pos_record,'g_ls':get_ls,'g_pos_record':get_pos_record,'g_sw_record':get_swipe_record,'g_sms_record':get_sms_record,'c_pos_record':clear_pos_record,'c_sw_record':clear_swipe_record,'c_sms_record':clear_sms_record}storage_main.update(storage_basic0)