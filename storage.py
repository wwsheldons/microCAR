import osclass Storage(object):    def __init__(self):        self.path     = '/sd/log/'        self.pos_path = self.path+'pos_record'        self.prnfn    = self.path+'pos.txt'        self.usfn     = self.path+'using_times.txt'        self.ipfn     = self.path+'ip.txt'        self.portfn   = self.path + 'port.txt'        self.apnfn    = self.path + 'apn.txt'        self.idfn     = self.path + 'id.txt'        self.pwdfn    = self.path + 'passwd.txt'        self.apfn     = self.path+'admin_phone.txt'        self.eocfn    = self.path+'emergency_open_card.txt'        self.eccfn    = self.path+'emergency_close_card.txt'        self.gifn     = self.path+'gas_info.txt'        self.srfn     = self.path+'swipe_record.txt'        self.smsfn    = self.path+'sms_record.txt'        self.pdrfn    = self.path+'power_down_record.txt'        self.lorfn    = self.path+'lock_open_record.txt'        self.corfn    = self.path+'control_open_record.txt'        self.posfn    = self.path+'pos_record.txt'        self.lsfn     = self.path+'lock_status.txt'    def load_sys_variable(self):        self.host_id = self.get_id()        self.ip = self.get_ip()        self.port = self.get_port()        self.gas_num = []        self.ic_open = []        self.ic_close = []        self.ic_using_times = []        self.gas_latitude = []        self.gas_longitude = []        self.distance = []        self.oprerate_lock_status = []        self.load_emergency_variable()    def load_emergency_variable(self):        self.gas_num = []        self.ic_open  = []        self.ic_close = []        self.ic_using_times = []        self.gas_latitude = []        self.gas_longitude = []        self.distance = []        self.oprerate_lock_status = []        self.emergency_close_card = []        self.emergency_open_card = []        try:            n,self.set_phone = self.get_adimin_phone()        except:            pass        try:            self.emergency_open_card,self.emergency_open_card_times = self.get_emergency_open_card()            self.emergency_close_card = self.get_emergency_close_card()        except:            pass        try:            n, gas_info = self.get_gas_info()            self.n_gas = n            for i in range(n):                self.gas_num.extend([gas_info[i][:6]])                self.ic_open.extend([gas_info[i][6:14]])                self.ic_close.extend([gas_info[i][14:22]])                self.ic_using_times.extend([int(gas_info[i][22:24])])                self.gas_latitude.extend([float(gas_info[i][24:33])])                self.gas_longitude.extend([float(gas_info[i][33:43])])                self.distance.extend([int(gas_info[i][43:47])])                self.oprerate_lock_status.extend([[int(j) for j in gas_info[i][47:]]])        except:            pass    def del_one_group_emergency_variable(self,n):        return del_rows(self.gifn,n)        def prepare_dir(self):        all_file = os.listdir('/sd')        if 'log' in all_file:            log_file = os.listdir('/sd/log')            for i in log_file:                os.remove('/sd/log/'+i)            os.rmdir('log')                os.mkdir('/sd/log')        os.mkdir('/sd/log/pos_record')        return True    def prepare_file(self):        self.modify_using_times(0)        self.modify_ip('')        self.modify_port(0)        self.modify_ls(0)        self.modify_id('')        self.modify_pwd('')        self.modify_adimin_phone('')        self.modify_emergency_open_card('')        self.modify_emergency_close_card('')        self.modify_gas_info('')        self.modify_swipe_record('')        self.modify_sms_record('')        self.modify_power_down_record('')        self.modify_lock_open_record('')        self.modify_control_open_record('')        self.modify_pos_record('')        return True    def write_line_to_file(self,filename,dat,mode):        try:            with open(filename, mode) as f:                f.write(dat)                f.write(b'\r\n')                f.close()                #pyb.sync()                #pyb.delay(50)                return 1        except OSError as error:            print("Error: can not write to SD card. %s" % error)            return None            def modify_info(self,filename,dat,opt = 'rewrite'):        if opt == 'add':            mode = 'a'        elif opt == 'rewrite':            mode = 'wb'        else:            print('wrong type for writing')            return None                if isinstance(dat,bytearray) or isinstance(dat,str) or isinstance(dat,bytes):            pass        elif isinstance(dat,int):            #dat = ((dat).to_bytes(4, "little"))            dat = str(dat).encode()        elif dat == None:            pass        else:            print('{} wrong data type'.format(filename))            return None        if self.write_line_to_file(filename,dat,mode):            self.load_sys_variable()            return 1    def modify_infos(self,filename,dats,opt = 'rewrite'):        for i in range(1,len(dats)):            if len(dats[0]) != len(dats[i]):                print('{} data format is wrong'.format(filename))                return None        n = 0        for i in range(len(dats)):            if i == 0:                mode = opt            else:                mode = 'add'            if self.modify_info(filename,dats[i],mode):                n= n+1        if n == len(dats):            self.load_sys_variable()            return 1        else:            return None        def read_line_from_file(self,filename):        nth = 0        try:            with open(filename, 'rb') as f:                line = f.readline()                while line:                    nth = nth +1                    yield nth,line                    line = f.readline()                f.close()                yield None        except OSError as error:            print("Error: can not write to SD card. %s" % error)            return None    def get_rows(self,filename):        n = 0         for line in self.read_line_from_file(filename):            if not line:                return n            n = n+1        return None        def get_info(self,filename,n=1):        for line in self.read_line_from_file(filename):            if line[0] == n:                if line[1][:-2] == b'':                    return b'0'                return line[1][:-2]        return None        def get_infos(self,filename):        n = get_rows(filename)        infos = []        if n <= 50:            for i in range(n):                infos.append(get_info(filename,i+1).decode())                #infos.append(get_info(filename,i+1))            if infos == ['0']:                pass            return infos        else:            print('RAM is not enough')            def del_rows(self,filename,row):        if isinstance(row,int):            row = [row]        n = get_rows(filename)        for i in range(len(row)):            if row[i] > n:                print('the {}th row is not exsit'.format(row))                return None        na,su = filename.split('.')        new_filename = na+'_.'+su        try:            with open(new_filename, 'wb') as g:                for i in range(n):                    if i+1 in row:                        continue                    g.write(self.get_info(filename,i+1))                    g.write(b'\r\n')            os.remove(filename)            os.rename(new_filename, filename)            self.load_sys_variable()            return 1        except:            return None                            def get_using_times(self):        #return int.from_bytes(get_info(usfn),'little') #b'0' ->48        return int(self.get_info(self.usfn),10)    def modify_using_times(self,num = 1):        if num == 0:            return self.modify_info(self.usfn,0)        return self.modify_info(self.usfn,self.get_using_times()+1)        def get_ip(self):        return self.get_info(self.ipfn).decode()    def modify_ip(self,ip):        return self.modify_info(self.ipfn,ip)        def get_port(self):        return int(self.get_info(self.portfn))    def modify_port(self,port):        return self.modify_info(self.portfn,port)            def get_ls(self):        return int(self.get_info(self.lsfn),10)    def modify_ls(self,ls):        return self.modify_info(self.lsfn,ls)        def get_apn(self):        return int(self.get_info(self.apnfn))    def modify_apn(self,apn):        return self.modify_info(self.apnfn,apn)            def get_id(self):        return self.get_info(self.idfn).decode()    def modify_id(self,local_id):        return self.modify_info(self.idfn,local_id)            def get_pwd(self):        return self.get_info(self.pwdfn).decode()    def modify_pwd(self,pwd):        return self.modify_info(self.pwdfn,pwd)            def get_adimin_phone(self):        return self.get_infos(self.apfn)    def modify_adimin_phone(self,ap):        if isinstance(ap,str) or isinstance(ap,bytes) or isinstance(ap,bytearray):            ap = [ap]        elif isinstance(ap,list):            pass        else:            print('the format of adimin phone is wrong')        return self.modify_infos(self.apfn,ap)            def get_emergency_open_card(self):        tmp_card = self.get_infos(self.eocfn)        card = [i[:-2] for i in tmp_card]        times = [int(i[-2:]) for i in tmp_card]        return card,times    def modify_emergency_open_card(self,eoc):        if isinstance(eoc,str) or isinstance(eoc,bytes) or isinstance(eoc,bytearray):            eoc = [eoc]        elif isinstance(eoc,list):            pass        else:            print('the format of emergency_open_card is wrong')        return self.modify_infos(self.eocfn,eoc)    def substruction_for_emergency_open_card(self,n):        card,times = self.get_emergency_open_card()        self.del_one_emergency_open_card(n)        return self.modify_info(self.eocfn,card[n]+'{:0>2}'.format(times[n]),'add')    def del_one_emergency_open_card(self,n):        return self.del_rows(self.eocfn,n)    def get_emergency_close_card(self):        return self.get_infos(self.eccfn)    def modify_emergency_close_card(self,ecc):        if isinstance(ecc,str) or isinstance(ecc,bytes) or isinstance(ecc,bytearray):            ecc = [ecc]        elif isinstance(ecc,list):            pass        else:            print('the format of emergency_close_card is wrong')        return self.modify_infos(self.eccfn,ecc)    def split_plus(self,d,n):        return [d[i:i+n] for i in range(0,len(d),n)]    def get_gas_info(self):        return self.get_infos(self.gifn)    def modify_gas_info(self,gi):        if gi == [] or gi == '':            return self.modify_info(self.gifn,'')        if isinstance(gi,list):            return self.modify_infos(self.gifn,gi)        order = gi[0]        num_of_gas = int(chr(gi[1]),10)        if order in [48,'0',b'0']:            mode = 'rewrite'        elif order in [49,'1',b'1']:            mode = 'add'        else:            print('write emergency data type is wrong')            return None        gas_data = gi[2:]        if len(gas_data)%59 != 0:            print('length of emergency data is wrong')            return None        return self.modify_infos(self.gifn,self.split_plus(gas_data,59),mode)    def del_one_gas_info(self,n):        return self.del_rows(self.gifn,n)    def get_gas_id(self):        n = self.get_rows(self.gifn)        ids = []        for i in range(n):            ids.append(self.get_info(self.gifn,i+1)[:6])        return str(n)+''.join([i.decode() for i in ids])    ###################################################start    def get_swipe_record(self):        return self.get_infos(self.srfn)    def modify_swipe_record(self,sr):        if not sr:            return self.clear_swipe_record()        if not isinstance(sr,bytearray):            sr = bytearray(sr)        sr[53+12] = 50        return self.modify_info(self.srfn,sr,'add')    def clear_swipe_record(self):        return self.modify_info(self.srfn,'')            def get_sms_record(self):        return self.get_infos(self.smsfn)    def modify_sms_record(self,sms):        if not sms:            return self.clear_sms_record()        if not isinstance(sms,bytearray):            sms = bytearray(sms)        sms[53+12] = 50        return self.modify_info(self.smsfn,sms,'add')    def clear_sms_record(self):        return self.modify_info(self.smsfn,'')            def get_power_down_record(self):        return self.get_info(self.pdrfn)    def modify_power_down_record(self,pdr):        return self.modify_info(self.pdrfn,pdr,'add')    def clear_power_down_record(self):        return self.modify_info(self.pdrfn,'','rewrite')    def get_lock_open_record(self):        return self.get_infos(self.lorfn)    def modify_lock_open_record(self,lor):        return self.modify_info(self.lorfn,lor,'add')    def clear_lock_open_record(self):        return self.modify_info(self.lorfn,'')            def get_control_open_record(self):        return self.get_infos(self.corfn)    def modify_control_open_record(self,cor):        return self.modify_info(self.corfn,cor,'add')    def clear_control_open_record(self):        return self.modify_info(self.corfn,'')    ###################################################end    def get_pos_record(self,n):        if n == 0:            return self.get_rows(self.prnfn)        else:            return self.get_info(self.prnfn,n)    def modify_pos_record(self,pos):        if not pos:            return self.modify_info(self.posfn,'')        if not isinstance(pos,bytearray):            pos = bytearray(pos)        pos[53+12] = 50        return self.modify_info(self.posfn,pos,'add')    def clear_pos_record(self,n):        return self.del_rows(self.posfn,n)